// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.174.0
//   protoc               v3.21.12
// source: src/proto/article.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { wrappers } from "protobufjs";
import { Observable } from "rxjs";

export const protobufPackage = "article";

export interface Article {
  id: string;
  title: string;
  author: string;
  topic: string;
  body: string;
  createdAt: Date | undefined;
  updatedAt: Date | undefined;
  deletedAt?: Date | undefined;
}

export interface Articles {
  articles: Article[];
}

export interface FindArticleDto {
  id: string;
}

export interface FilterArticleDto {
  title?: string | undefined;
  author?: string | undefined;
  topic?: string | undefined;
  body?: string | undefined;
}

export interface CreateArticleDto {
  title: string;
  author: string;
  topic: string;
  body: string;
}

export interface UpdateArticleDto {
  id: string;
  title?: string | undefined;
  author?: string | undefined;
  topic?: string | undefined;
  body?: string | undefined;
}

export const ARTICLE_PACKAGE_NAME = "article";

wrappers[".google.protobuf.Timestamp"] = {
  fromObject(value: Date) {
    return { seconds: value.getTime() / 1000, nanos: (value.getTime() % 1000) * 1e6 };
  },
  toObject(message: { seconds: number; nanos: number }) {
    return new Date(message.seconds * 1000 + message.nanos / 1e6);
  },
} as any;

export interface ArticleServiceClient {
  findOne(request: FindArticleDto): Observable<Article>;

  findByFilter(request: FilterArticleDto): Observable<Articles>;

  create(request: CreateArticleDto): Observable<Article>;

  update(request: UpdateArticleDto): Observable<Article>;

  delete(request: FindArticleDto): Observable<Article>;
}

export interface ArticleServiceController {
  findOne(request: FindArticleDto): Promise<Article> | Observable<Article> | Article;

  findByFilter(request: FilterArticleDto): Promise<Articles> | Observable<Articles> | Articles;

  create(request: CreateArticleDto): Promise<Article> | Observable<Article> | Article;

  update(request: UpdateArticleDto): Promise<Article> | Observable<Article> | Article;

  delete(request: FindArticleDto): Promise<Article> | Observable<Article> | Article;
}

export function ArticleServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["findOne", "findByFilter", "create", "update", "delete"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ArticleService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ArticleService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ARTICLE_SERVICE_NAME = "ArticleService";
